import 'package:connect_heart/data/models/user.dart';
import 'package:connect_heart/data/services/certificate_service.dart';
import 'package:dio/dio.dart';
import 'package:dartz/dartz.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class AuthService {
  static final Dio _dio = Dio();

  /// Kh·ªüi t·∫°o interceptor g·∫Øn token v√†o header + log token
  static Future<void> init() async {
    _dio.interceptors.clear();
    _dio.interceptors.add(InterceptorsWrapper(
      onRequest: (options, handler) async {
        final token = await _getToken();
        if (token != null) {
          options.headers['Authorization'] = 'Bearer $token';
          print('üîê Token ƒë√≠nh k√®m: $token');
        } else {
          print('‚ö†Ô∏è Kh√¥ng c√≥ token');
        }
        handler.next(options);
      },
    ));

    // Th√™m log to√†n b·ªô request/response ƒë·ªÉ debug
    _dio.interceptors.add(LogInterceptor(
      request: true,
      requestBody: true,
      responseBody: true,
      error: true,
    ));
  }

  /// ƒêƒÉng k√Ω
  static Future<Either<String, void>> registerUser({
    required String username,
    required String firstName,
    required String lastName,
    required String email,
    required String phone,
    required String address,
    required String? gender,
    required DateTime? dob,
    required String password,
  }) async {
    final data = {
      "user_name": username,
      "first_name": firstName,
      "last_name": lastName,
      "email": email,
      "phone_number": phone.replaceAll(' ', ''),
      "date_of_birth": dob?.toIso8601String().split('T').first,
      "gender": gender == 'Nam'
          ? 'male'
          : gender == 'N·ªØ'
              ? 'female'
              : 'other',
      "address": address,
      "password": password,
      "password_confirmation": password,
      "roles": [4],
    };

    try {
      final res = await _dio.post(
        'http://98.84.150.185:8000/api/connect-heart/auth/users',
        data: data,
      );
      if (res.statusCode == 200 || res.statusCode == 201) {
        return right(null);
      } else {
        return left('L·ªói server: ${res.statusMessage}');
      }
    } catch (e) {
      return left('ƒêƒÉng k√Ω th·∫•t b·∫°i: $e');
    }
  }

  /// ƒêƒÉng nh·∫≠p
  static Future<Either<String, String>> login({
    required String emailOrPhone,
    required String password,
  }) async {
    await init();
    final data = {
      "email_or_phone_number": emailOrPhone,
      "password": password,
    };

    try {
      final res = await _dio.post(
        'http://98.84.150.185:8000/api/connect-heart/auth/login',
        data: data,
        options: Options(contentType: Headers.jsonContentType),
      );

      if (res.statusCode == 200 || res.statusCode == 201) {
        final token = res.data['response']?['token']?['token'];
        if (token is String) {
          await _saveToken(token);

          final userJson = res.data['response']?['token']?['user'];
          if (userJson == null) return left('Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi d√πng.');

          final user = User.fromJson(userJson);
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString('user_data', jsonEncode(user.toJson()));

          await init();
          return right(token);
        } else {
          return left('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c token t·ª´ server.');
        }
      } else {
        return left('Sai th√¥ng tin ƒëƒÉng nh·∫≠p.');
      }
    } on DioException catch (e) {
      final resp = e.response;
      if (resp?.data != null) {
        final data = resp!.data;
        final msg = (data is Map && data['message'] != null)
            ? data['message']
            : data.toString();
        // log th√™m n·∫øu mu·ªën
        print('üî• SERVER MESSAGE: $msg');
        return left('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: $msg');
      }
      return left('L·ªói m·∫°ng ho·∫∑c kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server');
    } catch (e) {
      return left('L·ªói ƒëƒÉng nh·∫≠p: $e');
    }
  }

  /// G·ªçi profile (v√≠ d·ª• d√πng token)
  static Future<Either<String, dynamic>> getProfile() async {
    try {
      final res = await _dio
          .get('http://98.84.150.185:8000/api/connect-heart/user/profile');
      if (res.statusCode == 200) {
        return right(res.data);
      } else {
        return left('L·∫•y profile th·∫•t b·∫°i');
      }
    } catch (e) {
      return left('L·ªói g·ªçi API: $e');
    }
  }

  /// ƒêƒÉng xu·∫•t
  static Future<Either<String, void>> logout() async {
    final token = await _getToken();
    if (token == null) return left('Token kh√¥ng t·ªìn t·∫°i');

    try {
      final res = await _dio.post(
        'http://98.84.150.185:8000/api/connect-heart/auth/logout',
        options: Options(
          headers: {'Authorization': 'Bearer $token'},
        ),
      );

      if (res.statusCode == 200 || res.statusCode == 201) {
        await _clearToken();
        return right(null);
      } else {
        return left('L·ªói ƒëƒÉng xu·∫•t: ${res.statusMessage}');
      }
    } catch (e) {
      return left('L·ªói ƒëƒÉng xu·∫•t: $e');
    }
  }

  /// ƒê·ªïi m·∫≠t kh·∫©u
  static Future<Either<String, void>> resetPassword({
    required String currentPassword,
    required String newPassword,
  }) async {
    try {
      final res = await _dio.patch(
        'http://98.84.150.185:8000/api/connect-heart/auth/reset-password',
        data: {
          'current_password': currentPassword,
          'new_password': newPassword,
          'new_password_confirmation': newPassword,
        },
        options: Options(
          contentType: Headers.jsonContentType,
          headers: {'Accept': 'application/json'},
        ),
      );

      if (res.statusCode == 200 || res.statusCode == 201) {
        return right(null);
      } else {
        return left('L·ªói server: ${res.statusMessage}');
      }
    } on DioException catch (e) {
      return left(e.response?.data.toString() ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
    } catch (e) {
      return left('L·ªói ƒë·ªïi m·∫≠t kh·∫©u: $e');
    }
  }

  /// C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán
  static Future<Either<String, User>> updateProfileImage({
    required String imagePath, // ƒê∆∞·ªùng d·∫´n ·∫£nh c·∫ßn c·∫≠p nh·∫≠t
  }) async {
    final token = await _getToken();
    if (token == null) return left('Token kh√¥ng t·ªìn t·∫°i');

    FormData formData = FormData.fromMap({
      'imageProfile': await MultipartFile.fromFile(
          imagePath), // T·∫°o MultipartFile t·ª´ file ƒë∆∞·ªùng d·∫´n
    });

    try {
      final res = await _dio.post(
        'http://98.84.150.185:8000/api/connect-heart/auth/image-profile',
        data: formData,
        options: Options(
          headers: {'Authorization': 'Bearer $token'},
        ),
      );

      if (res.statusCode == 200 || res.statusCode == 201) {
        // Assuming that the response contains the updated user data
        final updatedUser = User.fromJson(
            res.data['user']); // Parse the user data from the response

        return right(updatedUser); // Return the updated user data
      } else {
        return left('L·ªói server: ${res.statusMessage}');
      }
    } catch (e) {
      return left('L·ªói c·∫≠p nh·∫≠t ·∫£nh: $e');
    }
  }

  // H√†m l·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng
  Future<Map<String, dynamic>> fetchProfileStatistics() async {
    try {
      final token = await AuthService._getToken(); // L·∫•y token t·ª´ SharedPreferences
      if (token == null) throw Exception('Token kh√¥ng t·ªìn t·∫°i');

      final response = await dio.get(
        'http://98.84.150.185:8000/api/connect-heart/auth/detail-user',
        options: Options(
          headers: {
            'Authorization': 'Bearer $token',
            'Accept': 'application/json',
          },
        ),
      );

      if (response.statusCode == 200) {
        // Tr·∫£ v·ªÅ th√¥ng tin th·ªëng k√™ t·ª´ API
        final data = response.data['response']; // D·ªØ li·ªáu th·ªëng k√™
        return {
          'total_events': data['total_events'] ?? 0,
          'total_blogs': data['total_blogs'] ?? 0,
          'total_likes': data['total_likes'] ?? 0,
        };
      } else {
        throw Exception('L·ªói khi l·∫•y th·ªëng k√™: ${response.statusMessage}');
      }
    } catch (e) {
      print('L·ªói fetchProfileStatistics: $e');
      rethrow;
    }
  }

  /// L∆∞u token
  static Future<void> _saveToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('auth_token', token);
  }

  /// L·∫•y token
  static Future<String?> _getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('auth_token');
  }

  /// X√≥a token
  static Future<void> _clearToken() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('auth_token');
  }

  /// Getter ƒë·ªÉ d√πng ngo√†i class
  static Dio get dioInstance => _dio;
}
